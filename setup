#!/bin/bash
#
# Sets up machine.
#
set -o nounset -o errexit -o pipefail

DOTFILES_DIR="$HOME/dotfiles"
DOTFILES_REPO="git@github.com:fernandoacorreia/dotfiles.git"
KEYFILE="$HOME/.ssh/id_ed25519"

if [ "$UID" == "0" ]; then
  echo Do not run as root.
  exit 1
fi

missing_executable() {
  local executable=$1
  ! [ -x "$(command -v ${executable})" ]
}

macos_cli_dev_tools_installed() {
  xcode-select --print-path &>/dev/null
}

macos_install_cli_dev_tools() {
  if ! macos_cli_dev_tools_installed; then
    echo "Installing command-line developer tools"
    xcode-select --install
    while ! cli_dev_tools_installed; do
      echo "Waiting for installation to finish (look for a dialog window)"
      sleep 10
    done
  fi
}

macos_install_brew() {
  if missing_executable brew; then
    echo "Installing Homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi
  eval "$(/opt/homebrew/bin/brew shellenv)"
}

macos_install_git() {
  echo "Invoking git to trigger automated setup if it's not installed"
  git --version
}

macos_add_ssh_key_to_agent() {
  echo "Adding ssh key to ssh agent"
  # Set config file
  if ! grep id_ed25519 ~/.ssh/config &>/dev/null; then
    cat <<EOF >> ~/.ssh/config
Host *
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile $KEYFILE
EOF
  fi
  # Start agent
  eval "$(ssh-agent -s)"
  # Add key
  ssh-add --apple-use-keychain "$KEYFILE"
}

macos_create_ssh_key() {
  if ! test -f "$KEYFILE"; then
    echo "Creating ssh key"
    ssh-keygen -t ed25519 -f "$KEYFILE" -C "$(hostname)"
    echo ""
    echo "Add your new public ssh key to your GitHub account and run this script again:"
    echo ""
    cat "${KEYFILE}.pub"
    exit 1
  fi
}

ubuntu_install_git() {
  if missing_executable git; then
    echo "Installing git"
    sudo apt-get update
    sudo apt-get install -y git
  fi
}

ubuntu_install_pip3() {
  if missing_executable pip3; then
    echo "Installing pip3"
    sudo apt-get update
    sudo apt-get install -y python3-pip
  fi
}

linux_add_ssh_key_to_agent() {
  echo "Adding ssh key to ssh agent"
  # Start agent
  eval "$(ssh-agent -s)"
  # Add key
  ssh-add "$KEYFILE"
}

linux_create_ssh_key() {
  if ! test -f "$KEYFILE"; then
    echo "Creating ssh key"
    ssh-keygen -t ed25519 -f "$KEYFILE" -C "$(hostname)"
    echo ""
    echo "Add your new public ssh key to your GitHub account and run this script again:"
    echo ""
    cat "${KEYFILE}.pub"
    exit 1
  fi
}

amazonlinux_install_git() {
  if missing_executable git; then
    echo "Installing git"
    sudo yum install -y git
  fi
}

amazonlinux_install_python3() {
  if missing_executable python3; then
    echo "Installing python3"
    sudo yum install -y python3
  fi
}


install_ansible() {
  if missing_executable ansible-playbook; then
    upgrade_pip
    echo "Installing Ansible"
    pip3 install ansible
  fi
}

install_prerequisites() {
  mkdir -p $HOME/.ssh
  if [ "${OSTYPE//[0-9.]/}" == "darwin" ]; then
    macos_install_cli_dev_tools
    macos_install_brew
    macos_install_git
    macos_create_ssh_key
    macos_add_ssh_key_to_agent
  elif cat /etc/*release | grep ^NAME | grep Ubuntu &>/dev/null; then
    ubuntu_install_git
    ubuntu_install_pip3
    linux_create_ssh_key
    linux_add_ssh_key_to_agent
  elif cat /etc/*release | grep ^NAME | grep 'Amazon Linux' &>/dev/null; then
    amazonlinux_install_git
    amazonlinux_install_python3
    linux_create_ssh_key
    linux_add_ssh_key_to_agent
  else
    echo "Unsupported OS"
    exit 1
  fi
  install_ansible
}

clone_repository() {
  if ! test -d $DOTFILES_DIR; then
    echo "Cloning from $DOTFILES_REPO"
    cd $HOME
    git clone --recurse-submodules $DOTFILES_REPO
  fi
}

upgrade_pip() {
  echo "Upgrading pip3"
  # sudo python3 -m pip install --upgrade pip
  sudo --set-home pip3 install --upgrade pip
  hash -r # Clear command cache because pip3 may have been moved from /usr/bin to /usr/local/bin
  pip3 --version
}

run_ansible() {
  echo "Running Ansible"
  export ANSIBLE_NOCOWS=1
  cd "$DOTFILES_DIR/ansible"
  PATH="$HOME/.local/bin:$PATH"
  ansible-playbook -i inventory --ask-become-pass playbook.yml
}

install_prerequisites
clone_repository
run_ansible
