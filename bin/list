#!/bin/bash
#
# Lists files matching glob patterns and copies them to the clipboard for pasting into an LLM chat.
# Supports patterns like "app/**/*entity.py" to find files in any subdirectory.
#
set -o nounset -o errexit -o pipefail

# Function to check if a file is text
is_text_file() {
    local file="$1"
    local mime_type=$(file -b --mime-type "$file")
    if [[ $mime_type =~ ^text/ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to process a single file
process_file() {
    local file="$1"
    # Output the file path
    echo "# $file:"
    # Check if file is empty first
    if [ ! -s "$file" ]; then
        echo "(empty file)"
        echo
        return
    fi
    # Then check if it's a text file
    if ! is_text_file "$file"; then
        echo "Skipping non-text file: $file" >&2
        return
    fi
    # Output the contents
    echo "$(cat "$file")"
    echo
}

# Function to process glob pattern
process_pattern() {
    local pattern="$1"
    local matches=()

    # Use find with -path to handle glob patterns
    # Convert glob pattern to find-compatible pattern
    local find_pattern="${pattern//\*\*/*}"

    while IFS= read -r -d '' file; do
        matches+=("$file")
    done < <(find . -type f -path "./${find_pattern}" -print0 2>/dev/null)

    if [ ${#matches[@]} -eq 0 ]; then
        echo "Warning: No files found matching pattern: $pattern" >&2
        return
    fi

    for file in "${matches[@]}"; do
        process_file "$file"
    done
}

# Main script
if [ $# -eq 0 ]; then
    echo "Usage: $0 <pattern1> [pattern2 ...]" >&2
    echo "Examples:" >&2
    echo "  $0 'app/**/*entity.py'    # Find all *entity.py files in app directory" >&2
    echo "  $0 'src/**/*.{js,ts}'     # Find all .js and .ts files in src directory" >&2
    exit 1
fi

# Process each argument as a pattern
for pattern in "$@"; do
    if [[ "$pattern" == *"*"* ]]; then
        # Handle as glob pattern
        process_pattern "$pattern"
    elif [ -e "$pattern" ]; then
        # Handle as direct file/directory path
        if [ -d "$pattern" ]; then
            while IFS= read -r -d '' file; do
                process_file "$file"
            done < <(find "$pattern" -type f -print0)
        else
            process_file "$pattern"
        fi
    else
        echo "Error: $pattern is neither a valid pattern nor an existing path" >&2
    fi
done | cbcopy

echo "File listing has been copied to clipboard" >&2
