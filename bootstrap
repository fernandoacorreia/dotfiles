#!/bin/bash
#
# Downloads the repository on a fresh machine and runs setup.
#
set -o nounset -o errexit -o pipefail

DOTFILES_DIR="$HOME/dotfiles"
DOTFILES_REPO="git@github.com:fernandoacorreia/dotfiles.git"
KEYFILE="$HOME/.ssh/id_ed25519"

function macos_cli_dev_tools_installed() {
  xcode-select --print-path &>/dev/null
}

function macos_install_cli_dev_tools() {
  if ! macos_cli_dev_tools_installed; then
    echo "Installing command-line developer tools"
    xcode-select --install
    while ! cli_dev_tools_installed; do
      echo "Waiting for installation to finish"
      sleep 10
    done
    # Required for pyenv: https://github.com/pyenv/pyenv/issues/1219
    sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS* -target /
  fi
}

function macos_create_ssh_key() {
  if ! test -f "$KEYFILE"; then
    echo "Creating ssh key"
    ssh-keygen -t ed25519 -f "$KEYFILE" -C "$(hostname)"
    echo "New ssh key created:"
    cat "${KEYFILE}.pub"
    echo "Add this ssh key to your GitHub account and run this script again."
    echo "See https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/"
    exit 1
  fi
}

function macos_add_ssh_key_to_agent() {
  echo "Adding ssh key to ssh agent"
  # Set config file
  if ! grep id_ed25519 ~/.ssh/config &>/dev/null; then
    cat <<EOF >> ~/.ssh/config
Host *
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile $KEYFILE
EOF
  fi
  # Start agent
  eval "$(ssh-agent -s)"
  # Add key
  ssh-add -K "$KEYFILE"
}

function ubuntu_install_git() {
  if ! which git &>/dev/null; then
    echo "Installing git"
    apt-get update
    apt-get install -y git
  fi
}

function ubuntu_create_ssh_key() {
  if ! test -f "$KEYFILE"; then
    echo "Creating ssh key"
    ssh-keygen -t ed25519 -f "$KEYFILE" -C "$(hostname)"
    echo "New ssh key created:"
    cat "${KEYFILE}.pub"
    echo "Add this ssh key to your GitHub account and run this script again."
    echo "See https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/"
    exit 1
  fi
}

function ubuntu_add_ssh_key_to_agent() {
  echo "Adding ssh key to ssh agent"
  # Start agent
  eval "$(ssh-agent -s)"
  # Add key
  ssh-add "$KEYFILE"
}

function detect_platform() {
  if [ "${OSTYPE//[0-9.]/}" == "darwin" ]; then
    export PLATFORM="macos"
  elif cat /etc/*release | grep ^NAME | grep Ubuntu &>/dev/null; then
    export PLATFORM="ubuntu"
  else
    export PLATFORM="unsupported"
  fi
}

function first_time_setup() {
  detect_platform
  if [ "$PLATFORM" == "macos" ]; then
    macos_install_cli_dev_tools
    macos_create_ssh_key
    macos_add_ssh_key_to_agent
  elif [ "$PLATFORM" == "ubuntu" ]; then
    ubuntu_install_git
    ubuntu_create_ssh_key
    ubuntu_add_ssh_key_to_agent
  else
    echo "Unsupported OS"
    exit 1
  fi
}

function clone_repository() {
  if ! test -d $DOTFILES_DIR; then
    echo "Cloning from $DOTFILES_REPO"
    cd $HOME
    git clone --recurse-submodules $DOTFILES_REPO
  fi
}

function run_setup() {
  echo "Running setup"
  cd "$DOTFILES_DIR"
  echo ./setup
}

if ! test -d "$DOTFILES_DIR"; then
  first_time_setup
  clone_repository
fi

run_setup
